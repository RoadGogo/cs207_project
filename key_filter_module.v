module key_filter_module(
	clk,              // 开发板上输入时钟: 50Mhz
	rst_n,            // 开发板上输入复位按键
	key_in,           // 输入按键信号
	flag_key           // 输出一个时钟的高电平
);

localparam n = 5;//按键的个数

//===========================================================================
// PORT declarations
//===========================================================================						
input        clk; 
input        rst_n;
input  [n-1:0] key_in;
output [n-1:0] flag_key;

//寄存器定义
reg [21:0] count;
reg [n-1:0] key_scan; //按键扫描值KEY

//===========================================================================
// 采样按键值，20ms扫描一次,采样频率小于按键毛刺频率，相当于滤除掉了高频毛刺信号。
//===========================================================================
always @(posedge clk or negedge rst_n)     //检测时钟的上升沿和复位的下降沿
begin
   if(!rst_n)                //复位信号低有效
	begin
      count <= 22'd0;        //计数器清0
		key_scan <= 0;
	end
   else
      begin
         if(count ==22'd1999_999)   //20ms扫描一次按键,20ms计数(100M/50-1=1999_999)
         //if(count ==22'd2)//仅用于仿真用
            begin
               count <= 22'd0;     //计数器计到20ms，计数器清零
               key_scan <= key_in; //采样按键输入电平
            end
         else
            count <= count + 22'd1; //计数器加1
     end
end
//===========================================================================
// 按键信号锁存一个时钟节拍
//===========================================================================
reg [n-1:0] key_scan_r = 0;
always @(posedge clk)
    key_scan_r <= key_scan;       
    
assign flag_key = key_scan_r[n-1:0] & (~key_scan[n-1:0]);  //当检测到按键有上降沿变化时，代表该按键被按下，按键有效 

endmodule
